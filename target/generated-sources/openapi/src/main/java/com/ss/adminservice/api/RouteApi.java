/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ss.adminservice.api;

import com.ss.adminservice.dto.Route;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-19T20:36:03.845684600-06:00[America/Denver]")
@Validated
@Api(value = "route", description = "the route API")
public interface RouteApi {

    default RouteApiDelegate getDelegate() {
        return new RouteApiDelegate() {};
    }

    /**
     * PUT /route : Add Route
     *
     * @param route  (optional)
     * @return Add successful (status code 200)
     *         or Add failed (status code 400)
     */
    @ApiOperation(value = "Add Route", nickname = "addRoute", notes = "", response = Route.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Add successful", response = Route.class),
        @ApiResponse(code = 400, message = "Add failed") })
    @PutMapping(
        value = "/route",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Route> addRoute(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Route route) {
        return getDelegate().addRoute(route);
    }


    /**
     * DELETE /route/{routeId} : delete route
     *
     * @param routeId  (required)
     * @return delete successful (status code 200)
     *         or delete failed (status code 400)
     */
    @ApiOperation(value = "delete route", nickname = "deleteRoute", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "delete successful"),
        @ApiResponse(code = 400, message = "delete failed") })
    @DeleteMapping(
        value = "/route/{routeId}"
    )
    default ResponseEntity<Void> deleteRoute(@ApiParam(value = "",required=true) @PathVariable("routeId") String routeId) {
        return getDelegate().deleteRoute(routeId);
    }


    /**
     * GET /route : get all routes
     *
     * @return list of routes (status code 200)
     */
    @ApiOperation(value = "get all routes", nickname = "getAllRoutes", notes = "", response = Route.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "list of routes", response = Route.class) })
    @GetMapping(
        value = "/route",
        produces = { "application/json" }
    )
    default ResponseEntity<Route> getAllRoutes() {
        return getDelegate().getAllRoutes();
    }


    /**
     * GET /route/{routeId} : get route at id
     *
     * @param routeId  (required)
     * @return returns route (status code 200)
     *         or route does not exist (status code 404)
     */
    @ApiOperation(value = "get route at id", nickname = "getRoute", notes = "", response = Route.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "returns route", response = Route.class),
        @ApiResponse(code = 404, message = "route does not exist") })
    @GetMapping(
        value = "/route/{routeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Route> getRoute(@ApiParam(value = "",required=true) @PathVariable("routeId") String routeId) {
        return getDelegate().getRoute(routeId);
    }

}
