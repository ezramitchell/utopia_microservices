/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ss.adminservice.api;

import com.ss.adminservice.dto.Booking;
import com.ss.adminservice.dto.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-19T12:52:51.050113-06:00[America/Denver]")
@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * PUT /user/{userId}/booking : Added new booking
     *
     * @param userId  (required)
     * @param booking  (optional)
     * @return Add successful (status code 200)
     *         or Add failed (status code 400)
     */
    @ApiOperation(value = "Added new booking", nickname = "addBooking", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Add successful"),
        @ApiResponse(code = 400, message = "Add failed") })
    @PutMapping(
        value = "/user/{userId}/booking",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addBooking(@ApiParam(value = "",required=true) @PathVariable("userId") String userId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Booking booking) {
        return getDelegate().addBooking(userId, booking);
    }


    /**
     * PUT /user : Create new user
     *
     * @param user  (optional)
     * @return User created (status code 200)
     *         or Delete failed (status code 400)
     */
    @ApiOperation(value = "Create new user", nickname = "addUser", notes = "", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User created", response = User.class),
        @ApiResponse(code = 400, message = "Delete failed") })
    @PutMapping(
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> addUser(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) User user) {
        return getDelegate().addUser(user);
    }


    /**
     * DELETE /user/{userId} : Deletes user at id
     *
     * @param userId  (required)
     * @return ok (status code 200)
     *         or Delete failed (status code 400)
     */
    @ApiOperation(value = "Deletes user at id", nickname = "deleteUser", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok"),
        @ApiResponse(code = 400, message = "Delete failed") })
    @DeleteMapping(
        value = "/user/{userId}"
    )
    default ResponseEntity<Void> deleteUser(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        return getDelegate().deleteUser(userId);
    }


    /**
     * GET /user/{userId} : Returns user at Id
     *
     * @param userId  (required)
     * @return ok (status code 200)
     *         or No user at id (status code 404)
     */
    @ApiOperation(value = "Returns user at Id", nickname = "getUser", notes = "", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = User.class),
        @ApiResponse(code = 404, message = "No user at id") })
    @GetMapping(
        value = "/user/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUser(@ApiParam(value = "",required=true) @PathVariable("userId") Integer userId) {
        return getDelegate().getUser(userId);
    }


    /**
     * GET /user/{userId}/booking : Get users bookings
     *
     * @param userId  (required)
     * @return Returns list of users bookings (status code 200)
     *         or No user at id (status code 404)
     */
    @ApiOperation(value = "Get users bookings", nickname = "getUserBookings", notes = "", response = Booking.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns list of users bookings", response = Booking.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No user at id") })
    @GetMapping(
        value = "/user/{userId}/booking",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Booking>> getUserBookings(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        return getDelegate().getUserBookings(userId);
    }


    /**
     * POST /user/{userId}/booking : Update booking, booking id necessary
     *
     * @param userId  (required)
     * @param booking  (optional)
     * @return Update successful (status code 200)
     *         or Update failed (status code 400)
     */
    @ApiOperation(value = "Update booking, booking id necessary", nickname = "updateBooking", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Update successful"),
        @ApiResponse(code = 400, message = "Update failed") })
    @PostMapping(
        value = "/user/{userId}/booking",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateBooking(@ApiParam(value = "",required=true) @PathVariable("userId") Integer userId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Booking booking) {
        return getDelegate().updateBooking(userId, booking);
    }


    /**
     * POST /user : Update user
     * Id necessary, any other non null properties will be updated
     *
     * @param user  (optional)
     * @return Update succeeded (status code 200)
     *         or Update failed (status code 400)
     */
    @ApiOperation(value = "Update user", nickname = "userPost", notes = "Id necessary, any other non null properties will be updated", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Update succeeded"),
        @ApiResponse(code = 400, message = "Update failed") })
    @PostMapping(
        value = "/user",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> userPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) User user) {
        return getDelegate().userPost(user);
    }

}
