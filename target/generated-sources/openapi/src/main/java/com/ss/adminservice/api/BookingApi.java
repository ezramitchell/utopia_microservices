/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ss.adminservice.api;

import com.ss.adminservice.dto.Booking;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-24T19:10:03.915280200-06:00[America/Denver]")
@Validated
@Api(value = "booking", description = "the booking API")
public interface BookingApi {

    default BookingApiDelegate getDelegate() {
        return new BookingApiDelegate() {};
    }

    /**
     * PUT /booking
     * add booking to user
     *
     * @param authorization  (required)
     * @param booking Booking to add (required)
     * @return added (status code 200)
     *         or failed (status code 400)
     */
    @ApiOperation(value = "", nickname = "addBooking", notes = "add booking to user", response = Booking.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "added", response = Booking.class),
        @ApiResponse(code = 400, message = "failed") })
    @PutMapping(
        value = "/booking",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Booking> addBooking(@ApiParam(value = "" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "Booking to add" ,required=true )  @Valid @RequestBody Booking booking) {
        return getDelegate().addBooking(authorization, booking);
    }


    /**
     * POST /booking
     * cancel booking
     *
     * @param authorization  (required)
     * @param booking Booking to cancel, only id necessary (required)
     * @return succeeded (status code 200)
     *         or failed (status code 400)
     */
    @ApiOperation(value = "", nickname = "cancelBooking", notes = "cancel booking", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "succeeded"),
        @ApiResponse(code = 400, message = "failed") })
    @PostMapping(
        value = "/booking",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> cancelBooking(@ApiParam(value = "" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "Booking to cancel, only id necessary" ,required=true )  @Valid @RequestBody Booking booking) {
        return getDelegate().cancelBooking(authorization, booking);
    }


    /**
     * GET /booking
     * get all bookings belonging to authenticated user
     *
     * @param authorization  (required)
     * @return list of bookings (status code 200)
     *         or failed (status code 400)
     */
    @ApiOperation(value = "", nickname = "getBookings", notes = "get all bookings belonging to authenticated user", response = Booking.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "list of bookings", response = Booking.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "failed") })
    @GetMapping(
        value = "/booking",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Booking>> getBookings(@ApiParam(value = "" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization) {
        return getDelegate().getBookings(authorization);
    }

}
