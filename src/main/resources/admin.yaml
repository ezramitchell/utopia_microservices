openapi: 3.0.3

info:
  title: Utopia api
  description: simple api for interfacing with utopa database
  version: 0.0.1

security:
  - basicAuth: [ ]

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: UUID string
        userRole:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        username:
          type: string
        password:
          type: string
          description: This is available only for creating new accounts
        phone:
          type: string
    Airport:
      type: object
      properties:
        iata_id:
          type: string
        city:
          type: string
    AirplaneType:
      type: object
      properties:
        id:
          type: string
          description: UUID
        maxCapacity:
          type: integer
          format: int32
    Airplane:
      type: object
      properties:
        id:
          type: string
          description: UUID
        airplaneType:
          $ref: '#/components/schemas/AirplaneType'
    Passenger:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
        address:
          type: string
    BookingPayment:
      type: object
      properties:
        stripeId:
          type: string
        refunded:
          type: boolean
    Booking:
      type: object
      properties:
        id:
          type: string
          description: UUID
        active:
          type: boolean
        confirmationCode:
          type: string
        passenger:
          $ref: '#/components/schemas/Passenger'
        payment:
          $ref: '#/components/schemas/BookingPayment'
        flight:
          $ref: '#/components/schemas/Flight'
    Route:
      type: object
      properties:
        id:
          type: string
          description: UUID
        originAirport:
          $ref: '#/components/schemas/Airport'
        destinationAirport:
          $ref: '#/components/schemas/Airport'
    Flight:
      type: object
      properties:
        id:
          type: string
          description: UUID
        route:
          $ref: '#/components/schemas/Route'
        airplane:
          $ref: '#/components/schemas/Airplane'
        departureTime:
          type: string
          format: date-time
        reservedSeats:
          type: integer
          format: int32
        seatPrice:
          type: number
          format: float
paths:
  /user/{userId}:
    get:
      operationId: getUser
      summary: Returns user at Id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: No user at id
    delete:
      operationId: deleteUser
      summary: Deletes user at id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: ok
        400:
          description: Delete failed
  /user:
    put:
      operationId: addUser
      summary: Create new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Delete failed
    post:
      summary: Update user
      description: Id necessary, any other non null properties will be updated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Update succeeded
        400:
          description: Update failed
  /user/{userId}/booking:
    get:
      operationId: getUserBookings
      summary: Get users bookings
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns list of users bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        404:
          description: No user at id
    put:
      operationId: addBooking
      summary: Added new booking
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        200:
          description: Add successful
        400:
          description: Add failed
    post:
      operationId: updateBooking
      summary: Update booking, booking id necessary
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        200:
          description: Update successful
        400:
          description: Update failed
  /booking:
    get:
      operationId: getAllBookings
      summary: Returns all bookings
      responses:
        200:
          description: list of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        400:
          description: Somethings wrong
  /flight/{flightId}:
    get:
      operationId: getFlight
      summary: Get flight at id
      parameters:
        - name: flightId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Read successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'
        400:
          description: How did you mess this up
    delete:
      operationId: deleteFlight
      summary: Delete flight at id
      parameters:
        - name: flightId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete successful
        400:
          description: Delete failed
    post:
      operationId: updateFlight
      summary: Update flight at id
      parameters:
        - name: flightId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
      responses:
        200:
          description: Update successful
        400:
          description: Update failed
  /flight:
    put:
      operationId: addFlight
      summary: Add flight, id unnecessary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
      responses:
        200:
          description: Add successful
        400:
          description: Add failed
    get:
      operationId: getAllFlights
      summary: Get all flights
      parameters:
        - name: flightId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Read successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'
        400:
          description: How did you mess this up
  /airport:
    put:
      operationId: addAirport
      summary: Add airport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Airport'
      responses:
        200:
          description: Add successful
        400:
          description: Add failed
    get:
      operationId: getAllAirports
      summary: get All airports
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Airport'
          description: list of airports
        400:
          description: no airports/failed
  /route:
    put:
      operationId: addRoute
      summary: Add Route
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        200:
          description: Add successful
        400:
          description: Add failed
    get:
      operationId: getAllRoutes
      summary: get all routes
      responses:
        200:
          description: list of routes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
  /route/{routeId}:
    delete:
      operationId: deleteRoute
      summary: delete route
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: delete successful
        400:
          description: delete failed
    get:
      operationId: getRoute
      summary: get route at id
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: returns route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        404:
          description: route does not exist
  /airplane:
    get:
      operationId: getAllAirplanes
      description: get all airplanes
      responses:
        200:
          description: list of airplanes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Airplane'
    put:
      operationId: addAirplane
      description: add airplane
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Airplane'
      responses:
        200:
          description: add successful
        400:
          description: add failed
  /airplane/{airplaneId}:
    get:
      operationId: getAirplane
      description: get airplane at id
      parameters:
        - name: airplaneId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: returns airplane
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Airplane'
    post:
      operationId: updateAirplane
      description: update airplane
      parameters:
        - name: airplaneId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Airplane'
      responses:
        200:
          description: update succesful
        400:
          description: update failed
  /airplane_type:
    put:
      operationId: addAirplaneType
      description: add airplanetype
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AirplaneType'
      responses:
        200:
          description: add successful
        400:
          description: add failed
    get:
      operationId: getAllAirplaneTypes
      description: get all airplane types
      responses:
        200:
          description: list of airplane types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AirplaneType'